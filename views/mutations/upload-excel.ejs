<% include ../partials/table-header %>

<style>
  .notes ul {
    list-style: none;
  }

  .notes ul li:before {
    content: '\2714\0020';
  }
</style>

<body>
  <% include ../partials/nav %>

  <div class="uk-margin">
    <a href="/" class="uk-button uk-button-danger" type="button">
      <span uk-icon="icon: arrow-left"></span> Back
    </a>
  </div>

  <div class="uk-container uk-card uk-card-default uk-card-body uk-box-shadow-large uk-margin-auto uk-animation-fade"
    style="width:50%;">

    <h1 class="uk-margin uk-text-center uk-text-primary">Upload Mutation Excel</h1>

    <div class="js-upload" uk-form-custom>
      <input id="file-excel" type="file" single>
      <button id="file-button" class="uk-button uk-button-primary uk-align-center" type="button" tabindex="-1">SELECT EXCEL FILE..</button>
      <span class="file-name"></span>
    </div>

    <hr class="uk-divider-icon">

    <div class="notes">
      <h3>Modifikasi</h3>
      <ul>
        <li>Tanggal</li>
        <li>Tipe</li>
        <li>No. Faktur</li>
        <li>Kts. Masuk</li>
        <li>Biaya/unit Masuk</li>
        <li>Nilai masuk</li>
        <li>Kts. Keluar</li>
        <li>Biaya/unit Keluar</li>
        <li>Nilai keluar</li>
        <li>Kuantitas</li>
        <li>Nilai Akhir</li>
      </ul>
      <h3>Export Settings</h3>
      <ul>
        <li>Continuous</li>
        <li>WYSIWYG</li>
        <li>As text</li>
        <li>Fast Export</li>
      </ul>
    </div>

  </div>

  <table style="display:none">
    <tbody>

    </tbody>
  </table>

  <% include ../partials/script %>
  <script src="/javascripts/libs/xls.js"></script>
  <script src="/javascripts/libs/xls-parser.js"></script>
  <script src="/javascripts/libs/jszip.js"></script>
  <script src="/javascripts/product-mapping.js"></script>
  <script>
    XLSParser.onParsed(async (rows) => {
      if (rows[1][1] !== 'Rincian Valuasi Persediaan') {
        console.log('Invalid Excel File')
        UIkit.notification.closeAll()
        UIkit.notification('<span uk-icon="icon: ban"></span> Invalid Excel File')
        return
      }

      rows = rows.filter(row =>
        (row[1] === 'Deskripsi Barang') ||
        (![].includes(row[4]) &&
        Object.keys(row).length === 11) 
      )
      rows = rows.map(row => row.filter(cell => cell))

      let newMutations = []
      let currentProductName = null
      for (let row of rows) {
        let doneAt = cleanDate(row[0])
        let type = Number(row[3]) > 0 ? 'Buy' : 'Sell'

        let price = Number(row[3]) > 0 ? cleanNumber(row[4]) : cleanNumber(row[7])
        if (type === 'Buy' && moment('2017-01-01').isSameOrBefore(doneAt) && moment(doneAt).isBefore('2018-08-01')) {
          price *= 1.1
        }

        if (row[0] === 'Deskripsi Barang') {
          currentProductName = ProductMapping.map(row[2].trim())
        } else {
          let newMutation = {
            invoiceID: row[2],
            productName: currentProductName,
            doneAt,
            info: row[1],
            type,
            quantity: Number(row[3]) > 0 ? Number(row[3]) : Number(row[6]),
            price,
          }
          newMutations.push(newMutation)
        }
      }

      // $('table').show()
      $('tbody').empty()
      rows.forEach((row, index) => {
        let $tr = $('<tr>').append($('<td>').text(index))
        row.forEach(cell => {
          $tr.append($('<td>').text(cell))
        })
        $('tbody').append($tr)
      })

      UIkit.notification.closeAll()
      UIkit.notification('<span uk-icon="icon: cog"></span> Saving..')
      $('#file-button').text('Please wait..').attr('disabled', true)
      try {
        // AJAX create bulk
        let fetchedMutations = await $.post(`/mutations/api/bulk`, {
          mutations: newMutations
        })
        console.log(fetchedMutations)
        UIkit.notification.closeAll()
        UIkit.notification('<span uk-icon="icon: check"></span> Added all')
      } catch (err) {
        console.log('error', err)
        UIkit.notification.closeAll()
        UIkit.notification('<span uk-icon="icon: ban"></span> Error / Duplicate Products')
      } finally {
        $('#file-button').text('Select Excel File..').attr('disabled', false)
      }
    })

    function cleanDate(date) {
      let monthMappings = {
        'Jan': 'Jan',
        'Feb': 'Feb',
        'Mar': 'Mar',
        'Apr': 'Apr',
        'Mei': 'May',
        'Jun': 'Jun',
        'Jul': 'Jul',
        'Agu': 'Aug',
        'Sep': 'Sep',
        'Okt': 'Oct',
        'Nov': 'Nov',
        'Des': 'Dec'
      }
      let month = monthMappings[date.substring(3, 6)]
      let cleanDate =  date.substring(0, 3) + month + date.substring(6)
      return moment(cleanDate, 'DD MMM YYYY').format('YYYY-MM-DD')
    }

    function cleanNumber(number) {
      return Number(number.replace(/[^0-9]+/g, ''))
    }
  </script>
</body>

<% include ../partials/footer %>