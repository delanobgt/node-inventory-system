<% include ../partials/table-header %>

<style>
  #table {
    width: 100%;
  }
</style>

<body>

  <div class="uk-container">
    <h1 class="uk-margin uk-text-center uk-text-primary">
      Inventory Mutation Summary<br>
      <span class="uk-text-muted">
        <%= moment(txtStartDate).format('Do MMMM YYYY') %> -
        <%= moment(txtEndDate).format('Do MMMM YYYY') %>
      </span>
    </h1>

    <div id="div_table" style="display:none;" class="uk-box-shadow-large uk-card uk-card-default uk-card-body">
      <table id="table" class="display" style="width: 100%;">
        <thead>
          <tr>
            <th>No.</th>
            <th>Product Name</th>
            <th>Remaining Quantity</th>
            <th>Average Price</th>
            <th>Remaining Price</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    <br>
    <br>
    <br>
    <br>
  </div>

  <% include ../partials/table-script %>
  <script>
    $(document).ready(async function () {
      await initTable('#table', '<%= txtStartDate %>', '<%= txtEndDate %>')
    })

    async function initTable(tableSelector, txtStartDate, txtEndDate) {
      const $table = $(tableSelector)

      $('#div_table').hide(0)
      UIkit.notification.closeAll()
      UIkit.notification('<span uk-icon="icon: cog"></span> Fetching..')
      try {
        let rows = await $.get('/mutations/api', {
          txtEndDate
        })
        rows.sort((a, b) => {
          if (a.doneAt != b.doneAt) {
            return new Date(a.doneAt) - new Date(b.doneAt)
          } else if (a.type != b.type) {
            return a.type == 'Buy' ? -1 : 1
          } else {
            return a.invoiceID.localeCompare(b.invoiceID)
          }
        })

        let productNamesToMutations = {}
        for (let row of rows) 
          (productNamesToMutations[row.product.name] = productNamesToMutations[row.product.name] || []).push(row)

        let products = await $.get('/products/api')
        let formattedRows = [], counter = 1
        for (let product of products) {
          if (!productNamesToMutations[product.name]) {
            formattedRows.push(
              [counter++].concat([product.name, 0, 0, 0])
            )
          } else {
            formattedRows.push(
              [counter++].concat(getEndingRow(productNamesToMutations[product.name]))
            )
          }
        }
        
        console.log(formattedRows)

        let table = $table.DataTable({
          // scrollX: true,
          // ordering: false,
          destroy: true,
          deferRender: true,
          responsive: true,
          dom: 'Bfrtip',
          lengthMenu: [
            [10, 25, 50, -1],
            [10, 25, 50, 'All']
          ],
          buttons: [
            'pageLength',
            {
              extend: 'copyHtml5'
            },
            {
              extend: 'excelHtml5',
              title: "Inventory Mutation Report (<%= moment(txtStartDate).format('Do MMMM YYYY') %> - <%= moment(txtEndDate).format('Do MMMM YYYY') %>)"
            },
            {
              extend: 'pdf',
              title: "Inventory Mutation Report (<%= moment(txtStartDate).format('Do MMMM YYYY') %> - <%= moment(txtEndDate).format('Do MMMM YYYY') %>)",
              text: 'Pdf',
              orientation: 'landscape'
            }
          ],
          data: formattedRows
        })

        table
          .column('0:visible')
          .order('asc')
          .draw()
        UIkit.notification.closeAll()
        UIkit.notification('<span uk-icon="icon: check"></span> Loaded')
        $('#div_table').show(0)
        return table
      } catch (err) {
        console.log(err)
        UIkit.notification.closeAll()
        UIkit.notification('<span uk-icon="icon: ban"></span> Load failed!')
        return null
      }
    }

    function getEndingRow(rows) {
      let remainingQuantity = 0, remainingPrice = 0, averagePrice = 0
      if (rows[0].type === 'Initial') {
        remainingQuantity = rows[0].quantity
        remainingPrice = rows[0].price
        averagePrice = remainingPrice / remainingQuantity
        rows.shift()
      }
      for (let row of rows) {
        if (row.type === 'Buy') {
          remainingQuantity += row.quantity
          remainingPrice += row.quantity * row.price
          averagePrice = remainingPrice / remainingQuantity
        } else if (row.type === 'Sell') {
          remainingQuantity -= row.quantity
          remainingPrice -= row.quantity * averagePrice
        } else {
          console.log('Wow! Ada yang Error!')
          alert('Wow! Ada yang Error!')
          throw new Error('Wow! Ada yang Error!')
        }
      }
      return [
        rows[0].product.name,
        formatIndo(remainingQuantity),
        formatIndo(averagePrice),
        formatIndo(remainingPrice)
      ]
    }

    function formatIndo(num) {
      return num.toLocaleString('us', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).replace(/,/g, '#').replace(/\./g, ',').replace(/#/g, '.')
    }
  </script>
</body>

<% include ../partials/footer %>