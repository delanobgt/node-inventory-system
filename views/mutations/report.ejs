<% include ../partials/table-header %>

<style>
  #table {
    width: 100%;
  }

  th:first-child, td:first-child {
    display: none;
  }
</style>

<body>

  <div class="uk-container">
    <h1 class="uk-margin uk-text-center uk-text-primary">
      Inventory Mutation Report [<%= productName %>]<br> 
      <span class="uk-text-muted">
        <%= moment(txtStartDate).format('Do MMMM YYYY') %> - <%= moment(txtEndDate).format('Do MMMM YYYY') %>
      </span>
    </h1>

    <div id="div_table" style="display:none;" class="uk-box-shadow-large uk-card uk-card-default uk-card-body">
      <table id="table" class="display" style="width: 100%;">
        <thead>
          <tr>
            <th>Ordering ID</th>
            <th>Done At</th>
            <th>Invoice ID</th>
            <th>Info</th>
            <th>In</th>
            <th>Purchase Price</th>
            <th>Out</th>
            <th>Sale Price</th>
            <th>Remaining Quantity</th>
            <th>Average Price</th>
            <th>Remaining Price</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    <br>
    <br>
    <br>
    <br>
  </div>

  <% include ../partials/table-script %>
  <script>
    $(document).ready(async function () {
      await initTable('#table', '<%= productName %>', '<%= txtStartDate %>', '<%= txtEndDate %>')
    })

    async function initTable(tableSelector, productName, txtStartDate, txtEndDate) {
      const $table = $(tableSelector)

      $('#div_table').hide(0)
      UIkit.notification.closeAll()
      UIkit.notification('<span uk-icon="icon: cog"></span> Fetching..')
      try {
        let rows = await $.get('/mutations/api', {
          txtEndDate,
          productName
        })
        rows.sort((a, b) => {
          if (a.doneAt != b.doneAt) {
            return new Date(a.doneAt) - new Date(b.doneAt)
          } else if (a.type != b.type) {
            return a.type == 'Buy' ? -1 : 1
          } else {
            return a.invoiceID.localeCompare(b.invoiceID)
          }
        })
        let formattedRows = [], counter = 0
        let remainingQuantity = 0, remainingPrice = 0, averagePrice = 0
        if (rows[0].info === '##INITIAL##') {
          remainingQuantity = rows[0].quantity
          remainingPrice = rows[0].price
          averagePrice = remainingPrice / remainingQuantity
          rows.shift()
        }
        for (let row of rows) {
          if (moment(row.doneAt).isSameOrAfter(moment(txtStartDate)) && formattedRows.length === 0) {
            formattedRows.push([
              counter++,
              '',
              '',
              'Beginning Balance',
              '',
              '',
              '',
              '',
              remainingPrice,
              Number.isNaN(averagePrice) ? '-' : averagePrice,
              remainingQuantity,
            ])
          }
          if (row.type === 'Buy') {
            remainingQuantity += row.quantity
            remainingPrice += row.quantity * row.price
            averagePrice = remainingPrice / remainingQuantity
          } else if (row.type === 'Sell') {
            remainingQuantity -= row.quantity
            remainingPrice -= row.quantity * averagePrice
          } else {
            console.log('Wow! Ada yang Error!')
            alert('Wow! Ada yang Error!')
            throw new Error('Wow! Ada yang Error!')
          }
          if (moment(row.doneAt).isSameOrAfter(moment(txtStartDate))) {
            formattedRows.push([
              counter++,
              moment(row.doneAt).format('DD-MM-YYYY'),
              row.invoiceID,
              row.info,
              row.type === 'Buy' ? row.quantity: '',
              row.type === 'Buy' ? formatIndo(row.quantity * row.price) : '',
              row.type === 'Sell' ? row.quantity: '',
              row.type === 'Sell' ? formatIndo(row.quantity * averagePrice) : '',
              formatIndo(remainingQuantity),
              formatIndo(averagePrice),
              formatIndo(remainingPrice)
            ])
          }
        }

        let table = $table.DataTable({
          // scrollX: true,
          // ordering: false,
          destroy: true,
          deferRender: true,
          responsive: true,
          dom: 'Bfrtip',
          lengthMenu: [
            [10, 25, 50, -1],
            [10, 25, 50, 'All']
          ],
          buttons: [
            'pageLength',
            {
              extend: 'copyHtml5',
              exportOptions: {
                columns: [0, 1, 2],
              }
            },
            {
              extend: 'excelHtml5',
              title: "Inventory Mutation Report (<%= moment(txtStartDate).format('Do MMMM YYYY') %> - <%= moment(txtEndDate).format('Do MMMM YYYY') %>)",
              exportOptions: {
                columns: [0, 1, 2]
              }
            },
            {
              extend: 'pdf',
              title: "Inventory Mutation Report (<%= moment(txtStartDate).format('Do MMMM YYYY') %> - <%= moment(txtEndDate).format('Do MMMM YYYY') %>)",
              text: 'Pdf',
              orientation: 'landscape',
              exportOptions: {
                columns: [0, 1, 2]
              }
            }
          ],
          data: formattedRows
        })

        table
          .column( '0:visible' )
          .order( 'asc' )
          .draw()
        UIkit.notification.closeAll()
        UIkit.notification('<span uk-icon="icon: check"></span> Loaded')
        $('#div_table').show(0)
        return table
      } catch (err) {
        console.log(err)
        UIkit.notification.closeAll()
        UIkit.notification('<span uk-icon="icon: ban"></span> Load failed!')
        return null
      }
    }

    function formatIndo(num) {
      return num.toLocaleString('us', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).replace(/,/g, '#').replace(/\./g, ',').replace(/#/g, '.')
    }
  </script>
</body>

<% include ../partials/footer %>